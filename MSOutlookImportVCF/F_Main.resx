<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAEQEBACFVVVQlNTU0KTk5ODU5O
        Tg1JSUkOVVVVDE5OTg1VVVUMSUlJB1VVVQlVVVUGVVVVA4CAgAQAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAIAAAAAQGBACE5OTg1NTU0USlVKGExV
        TBtNTU0eTVVVIVNaUyJVVVUhUFhQIFJSUh9SUlIcVVVVGFFRURZNWU0URFVVD1VVVQxmZmYFQEBABAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBABEZGRgtGUUYWT09GHU1N
        RihHUUcvSk5ONElSTThLVEs9TlJKPk9USz1PT086UlJNOFBQTDZOU04xT1VPLU5VTidQV1AjRlhYHVFd
        URZLWksRK1VVBgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEkkJAc9PT0VR0dHJElJ
        STFHT0M9Sk5DRUhOSE5IS0hVSk1KWUxPTF5NUEpgTlFOX1BQSl1QUEpZU1NNU09TTE1LU09HUFRQQE1X
        UjhOWFMxSVtPKkdcVSQ7WGIaHFVVCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACN0A3HEVF
        RTBFRUk/RklDUERJRF5GS0ZmSE1IbkdJR3ZJS0t7S01JgUpOToNNTk2CTU9Nfk9PT3hQUFBwTlFOaE5R
        U19MVVJXTlVSTlFZVUVJW1Y7R1xcL0ZZWSg6XV0WMzMzBQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiFD
        LBediABlsJIAmKmNAKSliwCsoYkBs56IBridhwi9m4UQwpqEFcOZhRbImoQZyZqGF8ibhhbEnYYXwJ+J
        F7yhiw+2pI0MsKeRAqmpkgCkrpUAnbGZAJS6ngCQZWpVMEpgYBgrVVUGAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAMwAFMCoKhoVuAP/ctQD/27UA/9y2AP/dtgD/3rYA/9+2AP/ftgD/4LYA/+C2AP/gtgD/4LYA/9+2
        AP/ftgD/37YA/9+2AP/ftgD/37YA/962AP/dtgD/3LUA/9u1AP/WsQDAOVVVCQBVVQMAAAAAAAAAAAAA
        AAAAAAAAAAAAALa2tgcREQ95AAAA/7SVAP/dtwD/37cA/+K4AP/juQD/5LoA/+S6AP/kugD/5LoA/+S6
        AP/kugD/5LoA/+S6AP/kugD/5LoA/+S6AP/kugD/47kA/+K4AP/ftwD/3LYA/9mzAOwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ODG0CAgL/tJcA/+G7AP/kvQD/5r0A/+i+AP/pvwD/6b8A/+m/
        AP/pvwD/6b8A/+m/AP/pvwD/6b8A/+m/AP/pvwD/6b8A/+m/AP/ovgD/5r0A/+S9AP/gugD/3LYA6AAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgGXAUGBf+2mgD/478A/+bBAP/qwwD/68QA/+3F
        AP/txQD/7cUA/+3FAP/txQD/7cUA/+3FAP/txQD/7cUA/+3FAP/txQD/7cUA/+zFAP/rwwD/58EA/+O/
        AP/duwD5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCQlXCwsL/7abAv/lwgD/6cUA/+zG
        AP/uyAD/78kA/+/JAP/wygD/8MoA//HKAP/xygD/8coA//HKAP/xygD/8csA//HLAP/xygD/8MoA/+7I
        AP/qxQD/5sMA/+C+APgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABISD1cUEhD/sJYi/+XF
        F//pxgX/7MkA/+7LAP/wywD/8cwA//HMAP/yzQD/884A//POAP/zzgD/9M8A//TPAP/0zwD/9M8A//TP
        AP/zzgD/8cwA/+3KAP/pxgX/4sEX+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxcVVxgY
        Fv+ymS7/5MYx/+fILP/qyyz/7cwq/+7NKf/vzij/8M8n//LQJv/y0iT/89Ik//XSI//10yH/9tMi//bT
        Iv/20yL/9tMi//TSIv/y0SX/7s4o/+rKLf/jxS74AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAdHRpXHh4c/7SdOv/lyEL/5shC/+nLQv/rzEP/7c9B/+7PQ//v0EL/8NFC//HSQP/z00D/9NVB//bV
        Qf/21kD/9tZA//bWQP/21kD/9dVB//LTQP/v0ED/6sxB/+PGQPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACYjIFcnJCL/gnQ2/6SPQP+jjz//o48//6SQPf+lkUD/pZE+/7mjRP/v0k7/79JP//HT
        UP/y1VH/9NZS//XXUf/111H/9ddR//XXUf/011H/8dRR/+7ST//qzU7/48dM+AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALCkmVy0rJ/8sKSf/LCkn/ywpJ/8sKSf/LCkn/ywpJ/8sKSf/Kykm/5mJ
        Qv/t0lf/7NFa/+7TWv/w1Fv/8dZc//HWXP/x1lz/8dZc//DVXP/v01r/7NFa/+fMV//ky1X4AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyLyxXNDAu/ytDNv80MC7/NDAu/zQwLv80MC7/NDAu/zQw
        Lv80MC7/MS4u/45/RP/s0WD/69Jg/+zSYv/u1GL/79Vj/+/VY//v1WP/7dRh/+vSYf/q0F//585e/+bM
        XP4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc0NFQeZUj/H45o/xtsS/85NTT/OTYz/zk2
        M/85NjP/OTYz/zk2M/85NjP/ODUy/3FmQ/+Hekn/hnpJ/4Z6Sf+GeUn/hnlJ/4Z5Sf+Gekn/hnpJ/4Z5
        Sf+Nfkvo6c5jXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW9KtByLYv9I3aj/Kphw/yBk
        R/9AOjn/Pzs4/z87OP8/Ozj/Pzs4/z87OP8/Ozj/Pjo5/z46Of8+Ojn/Pjo5/z46Of8+Ojn/Pjo5/z46
        Of8+Ojn/Pjo5/zo3ONcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgQAgAgFT/MNOX/wDK
        e/8f0pP/F4hh/yViR/9FQT7/RUE+/0VBPv9FQT7/RUE+/0VBPv9FQT7/RUE+/0VBPv9FQT7/RUE+/0VB
        Pv9FQT7/RUE+/0VBPv9FQT7/REE92AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZjMFAH5Q/z7X
        nv8AzX3/AMt5/wDNfP8z1pv/AH1N/0ZKRf9KRkP/SkZD/0pGQ/9KRkP/SkZD/0pGQ/9KRkP/SkZD/0pG
        Q/9KRkP/SkZD/0pGQ/9KRkP/SkZD/0pGQ/9JRkLYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACE
        VuonsH//ANKB/wDOef8Aznv/AM55/wDPgf9A2aP/AH9R/0xNR/9OSkb/TkpG/05KRv9OSkb/TkpG/05K
        Rv9OSkb/TkpG/05KRv9OSkb/TkpG/05KRv9OSkb/TkpG/05JRtgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABhlnMWbqd/zW0h/8r0ZX/ANSJ/wDQf/8A04b/JdWX/y2yhP9WvZv/FX9X/1NPS/9TT0v/U09L/1NP
        S/9TT0v/U09L/1NPS/9TT0v/U09L/1NPS/9TT0v/U09L/1NPS/9TT0v/U05K2AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAABVAAMAe0l6AHtKfACAUfIt0ZX/ANOG/ybcm/8Ae03/MGhN/zJmTf9UVFD/V1JP/1dS
        T/9XUk//V1JP/1dST/9XUk//V1JP/1dST/9XUk//V1JP/1dST/9XUk//V1JP/1dST/9XUk7aAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBW90jWov8K2I7/ReGn/wB9Tf9ZVlL/WlZS/1pW
        Uv9aVlL/WlZS/1pWUv9aVlL/WlZS/1pVUuFZVVLRWlVR0lpVUdJaVVHSWlVR0lpVUdJaVVHSWVZR01lV
        UbEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgFX3VNim/y/cl/9W5K7/AH1N/15Z
        VP9eWVT/XllU/15ZVP9eWVT/XllU/15ZVP9eWFSxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDVu5g2qz/ReCh/2To
        tv8AfU3/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIJV72re
        sf9X46n/cOq8/wB9T/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAg1Xwf+TB/3jsv/+K887/AHxO/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAqHW9AAhFf/AINX/QCDV/0FiFvvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzQBQAeUMTAHNAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AAf/0AAB/8AAAH+AAAB+AAAAPgAAAD4AAAA+AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAH+AAAB/AAAAfwAAAH4AAAB+AAAAf8AAAH/AA
        f//wf///8H////B////wf///+P////////8=
</value>
  </data>
</root>